// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "reviews": Application User Types
//
// Command:
// $ goagen
// --design=github.com/annguyen1892/godesign/design
// --out=$(GOPATH)/src/reviews
// --version=v1.2.0-dirty

package app

import (
	"github.com/goadesign/goa"
	"unicode/utf8"
)

// ProductReviewPayload is the type used
type productReviewPayload struct {
	// Content of review
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// customer_id create review
	CustomerID *int `form:"customer_id,omitempty" json:"customer_id,omitempty" xml:"customer_id,omitempty"`
	// product_id of review
	ProductID *int `form:"product_id,omitempty" json:"product_id,omitempty" xml:"product_id,omitempty"`
	// rating create review
	Rating *int `form:"rating,omitempty" json:"rating,omitempty" xml:"rating,omitempty"`
	// Title of review
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
}

// Validate validates the productReviewPayload type instance.
func (ut *productReviewPayload) Validate() (err error) {
	if ut.Title == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "title"))
	}
	if ut.Content == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "content"))
	}
	if ut.Rating == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "rating"))
	}
	if ut.CustomerID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "customer_id"))
	}
	if ut.Content != nil {
		if utf8.RuneCountInString(*ut.Content) < 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.content`, *ut.Content, utf8.RuneCountInString(*ut.Content), 50, true))
		}
	}
	if ut.CustomerID != nil {
		if *ut.CustomerID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`request.customer_id`, *ut.CustomerID, 1, true))
		}
	}
	if ut.ProductID != nil {
		if *ut.ProductID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`request.product_id`, *ut.ProductID, 1, true))
		}
	}
	if ut.Rating != nil {
		if *ut.Rating < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`request.rating`, *ut.Rating, 1, true))
		}
	}
	if ut.Rating != nil {
		if *ut.Rating > 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`request.rating`, *ut.Rating, 5, false))
		}
	}
	if ut.Title != nil {
		if utf8.RuneCountInString(*ut.Title) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.title`, *ut.Title, utf8.RuneCountInString(*ut.Title), 5, true))
		}
	}
	return
}

// Publicize creates ProductReviewPayload from productReviewPayload
func (ut *productReviewPayload) Publicize() *ProductReviewPayload {
	var pub ProductReviewPayload
	if ut.Content != nil {
		pub.Content = *ut.Content
	}
	if ut.CustomerID != nil {
		pub.CustomerID = *ut.CustomerID
	}
	if ut.ProductID != nil {
		pub.ProductID = ut.ProductID
	}
	if ut.Rating != nil {
		pub.Rating = *ut.Rating
	}
	if ut.Title != nil {
		pub.Title = *ut.Title
	}
	return &pub
}

// ProductReviewPayload is the type used
type ProductReviewPayload struct {
	// Content of review
	Content string `form:"content" json:"content" xml:"content"`
	// customer_id create review
	CustomerID int `form:"customer_id" json:"customer_id" xml:"customer_id"`
	// product_id of review
	ProductID *int `form:"product_id,omitempty" json:"product_id,omitempty" xml:"product_id,omitempty"`
	// rating create review
	Rating int `form:"rating" json:"rating" xml:"rating"`
	// Title of review
	Title string `form:"title" json:"title" xml:"title"`
}

// Validate validates the ProductReviewPayload type instance.
func (ut *ProductReviewPayload) Validate() (err error) {
	if ut.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "title"))
	}
	if ut.Content == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "content"))
	}

	if utf8.RuneCountInString(ut.Content) < 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.content`, ut.Content, utf8.RuneCountInString(ut.Content), 50, true))
	}
	if ut.CustomerID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`type.customer_id`, ut.CustomerID, 1, true))
	}
	if ut.ProductID != nil {
		if *ut.ProductID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`type.product_id`, *ut.ProductID, 1, true))
		}
	}
	if ut.Rating < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`type.rating`, ut.Rating, 1, true))
	}
	if ut.Rating > 5 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`type.rating`, ut.Rating, 5, false))
	}
	if utf8.RuneCountInString(ut.Title) < 5 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.title`, ut.Title, utf8.RuneCountInString(ut.Title), 5, true))
	}
	return
}
