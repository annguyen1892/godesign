// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "reviews": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/annguyen1892/godesign/design
// --out=$(GOPATH)/src/reviews
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// CreateReviewContext provides the review create action context.
type CreateReviewContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *ProductReviewPayload
}

// NewCreateReviewContext parses the incoming request URL and body, performs validations and creates the
// context used by the review controller create action.
func NewCreateReviewContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateReviewContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateReviewContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateReviewContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// ShowReviewContext provides the review show action context.
type ShowReviewContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewShowReviewContext parses the incoming request URL and body, performs validations and creates the
// context used by the review controller show action.
func NewShowReviewContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowReviewContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowReviewContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowReviewContext) OK(r *ProductReviewPayload) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
